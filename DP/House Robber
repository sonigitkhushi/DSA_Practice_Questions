class Solution {
    public int f(int ind,int[]nums,int[]dp){
        if(ind<0) return 0;
        if(ind==0) return nums[ind];
        if(dp[ind]!=-1) return dp[ind];
        int pick=nums[ind]+f(ind-2,nums,dp);
        int nonpick=f(ind-1,nums,dp);
        dp[ind]=Math.max(pick,nonpick);
        return dp[ind];
    }
    public int rob(int[] nums) {
        int n=nums.length;
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return f(n-1,nums,dp);
        // int n=nums.length;
        // int max=0;
        // if(n==1) return nums[0];
        // for(int i=0; i<n; i++){
        //     int sum=nums[i];
        //     for(int j=i+2; j<n;j+=2){
        //         sum+=nums[j];
                
        //     }
        //     max=Math.max(max,sum);
        //     // sum=0;
        // }
        // return max;
    }
}
