import java.util.* ;
import java.io.*; 
public class Solution {
    public static int f(int i,int j,int[][]a,int[][]dp,int n){
        if(i==n-1) return a[n-1][j];
        //if(i<0 || j<0) return Integer.MAX_VALUE;
        if(dp[i][j]!=-1) return dp[i][j];

        int r=a[i][j]+f(i+1,j,a,dp,n);
        int l=a[i][j]+f(i+1,j+1,a,dp,n);
      dp[i][j]= Math.min(r,l);
      return dp[i][j];
    }
    public static int minimumPathSum(int[][] triangle, int n) {
//        int m=triangle[0].length;
       int[][]dp=new int[n+1][n+1];
       for(int[]rw:dp){
           Arrays.fill(rw,-1);
       }
//        dp[0][0]=triangle[0][0];
// int l=0,r=0;
//        for(int i=0;i<n;i++){
//            for(int j=0; j<m; j++){
               
// if(i>0){
//       r=triangle[i][j]+dp[i+1][j];
// }
// if(j>0){
//       l=triangle[i][j]+dp[i+1][j+1];
// }
// dp[i][j]= Math.min(r,l);
//            }
//        }
//        return dp[n-1][m-1];
return f(0,0,triangle,dp,n);
    }
}
