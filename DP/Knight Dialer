// class Solution {
//      int MOD = (int) 1e9 + 7;
// //     ArrayList<ArrayList<Integer>>adj = ArrayList<ArrayList<Integer>>{
// //         {4, 6},
// //         {6, 8},
// //         {7, 9},
// //         {4, 8},
// //         {3, 9, 0},
// //         {},
// //         {1, 7, 0},
// //         {2, 6},
// //         {1, 3},
// //         {2, 4}
// // };

// ArrayList<ArrayList<Integer>> adj = new ArrayList<>(Arrays.asList(
//                 new ArrayList<>(Arrays.asList(4, 6)),
//                 new ArrayList<>(Arrays.asList(6, 8)),
//                 new ArrayList<>(Arrays.asList(7, 9)),
//                 new ArrayList<>(Arrays.asList(4, 8)),
//                 new ArrayList<>(Arrays.asList(3, 9, 0)),
//                 new ArrayList<>(),
//                 new ArrayList<>(Arrays.asList(1, 7, 0)),
//                 new ArrayList<>(Arrays.asList(2, 6)),
//                 new ArrayList<>(Arrays.asList(1, 3)),
//                 new ArrayList<>(Arrays.asList(2, 4))
//         ));
// int dp[5001][10];

//     public int solve(int n,int cell){
//         if(n==0) return 1;
//         int sum=0;
//         for(int nextadj:adj.get(cell)){
//             sum+=(solve(n-1,nextadj))%MOD;

//         }
//         return sum;
//     }
//     public int knightDialer(int n) {
//         int dp[][]=
//         int res=0;
//         for(int cell=0; cell<=9; cell++){
//             res+=(solve(n-1,cell))%MOD;
//         }
//         return res;
//     }
// }


class Solution {
    //easy one only just think fresh and debug if needed in onlinegdb
    public int knightDialer(int n) {
         if (n == 1) {
            return 10;
        }
        int mod = 1000000007;

        // Possible moves from each digit
        int[][] moves = {
            {4, 6}, {6, 8}, {7, 9}, {4, 8}, {0, 3, 9},
            {}, {0, 1, 7}, {2, 6}, {1, 3}, {2, 4}
        };

        int[] dp = new int[10];
        Arrays.fill(dp, 1);

        for (int step = 2; step <= n; step++) {
            int[] newDp = new int[10];
            for (int i = 0; i < 10; i++) {
                for (int neighbor : moves[i]) {
                    newDp[i] = (newDp[i] + dp[neighbor]) % mod;
                }
            }
            dp = newDp;
        }

        int result = 0;
        for (int count : dp) {
            result = (result + count) % mod;
        }

        return result;
    }
}
