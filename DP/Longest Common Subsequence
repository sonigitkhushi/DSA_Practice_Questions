class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        
         int[][] dp = new int[s1.length() + 1][s2.length() + 1];
        for (int i = 0; i < s1.length(); ++i)
            for (int j = 0; j < s2.length(); ++j)
                if (s1.charAt(i) == s2.charAt(j)) dp[i + 1][j + 1] = 1 + dp[i][j];
                else dp[i + 1][j + 1] =  Math.max(dp[i][j + 1], dp[i + 1][j]);
        return dp[s1.length()][s2.length()];


    //    int count=0;
    //     for(int i=0; i<text1.length();i++){
    //         for(int j=0; j<text2.length();j++){
    //             if(text1.charAt(i)==text2.charAt(j)){
    //                 count++;
    //             }
    //         }
    //     }
    //     return count;



        // int i=0,j=0;
        // while(i<text1.length() && j<text2.length()){
        //      if(text2.charAt(j)==text1.charAt(i)){
        //          count++;
        //          j++;
        //          i++;

        //      }
            
        //     else if(count>=0 && i==text1.length()-1){
        //         i--;
        //         j++;
        //     }
        //     else{
        //         i++;
        //     }
        // }
        // return count;




    //     Stack<Character>s1=new Stack<>();
    //     Stack<Character>s2=new Stack<>();
    //     Stack<Character>s3=new Stack<>();
    //     int count=0;
    //     if(text1.length()>=1 && text2.length()<=1000){
    //         for(int i=0;i<text1.length();i++){
    //         s1.push(text1.charAt(i));
    //     }
    //     for(int i=0;i<text2.length();i++){
    //         s2.push(text2.charAt(i));
    //     }
    //     }
        
    //    while(!s1.isEmpty() && !s2.isEmpty()){
    //        if(s1.peek()!=s2.peek()){
    //            s3.push(s2.pop());
    //        }
    //    }
    //    while(!s3.isEmpty()){
    //        if(s3.peek()!=s1.peek()){
    //            s2.push(s3.pop());
    //            s1.pop();
    //        }
    //        if(s3.peek()==s1.peek()){
    //            count++;
    //            s3.pop();
    //            s1.pop();
    //        }

    //    }
    //    return count;
    }
}
