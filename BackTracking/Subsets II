import java.util.*;

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums); // Sort the array to handle duplicates
        List<List<Integer>> result = new ArrayList<>();
        generateSubsets(result, nums, 0, new ArrayList<>());
        return result;
    }

    private void generateSubsets(List<List<Integer>> result, int[] nums, int index, List<Integer> current) {
        result.add(new ArrayList<>(current)); // Add the current subset to the result list

        for (int i = index; i < nums.length; i++) {
            // If the current element is the same as the previous element, skip it to avoid duplicates
            if (i > index && nums[i] == nums[i - 1]) continue;
            
            current.add(nums[i]); // Include the current element
            generateSubsets(result, nums, i + 1, current); // Recurse to the next element
            current.remove(current.size() - 1); // Backtrack by removing the current element
        }
    }
}
