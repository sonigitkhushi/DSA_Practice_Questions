//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


 class Solution {  
 public int numIslands(char[][] grid) { 
     int row=grid.length; 
     int col=grid[0].length; 
     int ans=0; 
     for(int i=0;i<row;i++) {
         for(int j=0;j<col;j++) { 
             if(grid[i][j]=='1') { 
                 bfs(grid,i,j,row,col); ans++; 
                 
             } 
             
         } 
         
     } 
     return ans; 
     
 } 
 public static void bfs(char[][] grid, int x, int y,int row,int col) {
     int[][] dir={{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{-1,1},{1,-1}}; 
     Queue<int[]> q=new LinkedList<>(); 
     q.add(new int[]{x,y}); 
     while(!q.isEmpty()) { 
         int[] cur=q.poll(); 
         for(int[] d : dir) { 
             int r=cur[0]+d[0]; 
             int c=cur[1]+d[1]; 
             if(r<0 ||c<0 || r>=grid.length || c>=grid[0].length || grid[r][c]=='0') 
                continue; 
            grid[r][c]='0'; 
            q.add(new int[]{r,c}); 
             
         }
         } 
     
 } 
     
 }
