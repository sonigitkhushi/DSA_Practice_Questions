//{ Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
}
// } Driver Code Ends


/*Complete the function below*/

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visit[]=new boolean[V];
        boolean path[]=new boolean [V];
        for(int i=0; i<V; i++){
            if(visit[i]) continue;
            if(dfs(i,visit,path,adj)) return true;
        }
        return  false;
        
        
    }
    public static boolean dfs(int s, boolean visit[], boolean[]path, ArrayList<ArrayList<Integer>>adj){
        visit[s]=true;
        path[s]=true;
        for(int u:adj.get(s)){
            if(visit[u] && path[u]) return true;
            else if(!visit[u]){
                boolean cyclePresent=dfs(u,visit,path,adj);
                 if(cyclePresent) return true;
            }
           
        }
        path[s]=false;
        return false;
    }
}
