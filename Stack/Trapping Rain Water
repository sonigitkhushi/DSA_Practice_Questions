// class Solution {
//     public int trap(int[] height) {
//         int n=height.length;
//        int[] ml=new int[n];
//          int[] mr=new int[n];
//          int [] water=new int[n];

//          ml[0]=height[0];
//          for(int i=1; i<n; i++){
//              ml[i]=Math.max(ml[i-1],ml[i]);
            
//          }
//          mr[n-1]=height[n-1];
//          for(int i=n-2; i>=0; i--){
//              mr[i]=Math.max(mr[i+1],mr[i]);
//          }
//         for(int i=0; i<n; i++){
//             water[i]=Math.min(mr[i],ml[i])-height[i];
//         }
//         int sum=0;
//         for(int i=0; i<n; i++){
//             sum+=water[i];
//         }
//         return sum;
//     }
// }

class Solution {
    public int trap(int[] height) {
        int l = 0, r = height.length - 1, sum = 0, lMax = 0, rMax = 0;
        while(l <= r){
            lMax = Math.max(height[l], lMax);
            rMax = Math.max(height[r], rMax);
			 //why? because, for example if the lMax is smaller, we can sure that how much water could be trapped at the left pointer position is decided by the left side. 
            if(lMax < rMax){
                sum += lMax - height[l++];
            }else{
                sum += rMax - height[r--];
            }
        }
        return sum;
    }
}
