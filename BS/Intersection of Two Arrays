class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        // HashSet<Integer>h=new HashSet<>();
        // for(int i=0; i<nums1.length; i++){
        //     for(int j=0; j<nums2.length; j++){
        //         if(nums1[i]==nums2[j]){
        //             h.add(nums1[i]);
        //         }
        //     }
          
            
        // }
        //   int ans[]=new int[h.size()];
        //    int count=0;
        // for(int i:h){
        //         ans[count]=i;
        //         count++;
        //     }
        // return ans;


//Binary Search-----
        HashSet<Integer>h=new HashSet<>();
        Arrays.sort(nums1);
        for(int n2:nums2){
            if(BinaraySearch(nums1,n2)){
                h.add(n2);
            }
        }
        int ans[]=new int[h.size()];
        int count=0;
        for(int i:h){
            ans[count]=i;
            count++;
        }
        return ans;
        
    }
    public boolean BinaraySearch(int arr[],int n){
        int s=0;
        int e=arr.length-1;
        int mid=0;
        while(s<=e){
            mid=s+(e-s)/2;
            if(arr[mid]==n) return true;
            else if(arr[mid] > n){
                e = mid - 1;
            }

            else if(arr[mid] < n){
                s = mid + 1;
        }
       
    }
     return false;
    }
}
