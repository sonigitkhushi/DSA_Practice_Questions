class Solution {
    private void dfs(char[][] grid,int r,int c){
        // vis[r][c]=true;
        if(r>=0 && c>=0 && r<grid.length && c<grid[0].length && grid[r][c]=='1'){
            grid[r][c]='0';
            dfs(grid,r+1,c);
            dfs(grid,r-1,c);
            dfs(grid,r,c+1);
            dfs(grid,r,c-1);
        }
        // for(int dr=-1; dr<=1; dr++){
        //     for(int dc=-1; dc<=1; dc++){
        //         int nrow=r+dr;
        //         int ncol=c+dc;
        //     }
        // }
    }
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int count=0;
        //boolean vis[][]=new boolean[n][m];
       // vis[0][0]=true;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                // if(!vis[i][j]){
                    if(grid[i][j]=='1'){
                    dfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
}
