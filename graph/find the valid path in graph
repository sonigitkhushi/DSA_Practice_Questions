class Solution {
    public boolean validPath(int n, int[][] edges, int source, int des) {
        // boolean []vis=new boolean[n];
        // vis[source]=true;
        // boolean flag=true;
        // while(!vis[des] && flag){
        //     flag=false;
        //     for(int i=edges.length-1;i>=0;i--){
        //         if(u)
        //     }
        // }

//BFS
        // List<List<Integer>>g=buildGraph(n,edges);
        // boolean[]vis=new boolean[n];
        // Queue<Integer>q=new LinkedList<>();
        // q.offer(source);
        // while(!q.isEmpty()){
        //     int curr=q.poll();
        //     if(curr==des) return true;
        //     vis[curr]=true;
        //     for(int nei:g.get(curr)){
        //         if(!vis[nei]){
        //             q.offer(nei);
        //         }
        //     }
        // }
        // return false;



        //DFS
        List<List<Integer>>g=buildGraph(n,edges);
        boolean[]vis=new boolean[n];
        Stack<Integer>s=new Stack<>();
        s.push(source);
        while(!s.isEmpty()){
            int curr=s.pop();
            if(curr==des) return true;
            vis[curr]=true;
            for(int nei:g.get(curr)){
                if(!vis[nei]) s.push(nei);
            }
        }
        return false;
    }

    //firstly create a graph
    private List<List<Integer>>buildGraph(int n,int[][]edges){
        List<List<Integer>>g=new ArrayList<>();
        for(int i=0;i<n;i++){
            g.add(new ArrayList<>());
        }
        for(int []edge:edges){
            g.get(edge[0]).add(edge[1]);
            g.get(edge[1]).add(edge[0]);
        }
        return g;
    }
}
