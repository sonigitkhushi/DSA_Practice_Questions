class Solution {
    public int largestInteger(int num) {
        PriorityQueue<Integer>o=new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer>e=new PriorityQueue<>(Collections.reverseOrder());
           String s=Integer.toString(num);
           for(int i=0; i<s.length();i++){
               int value=Character.getNumericValue(s.charAt(i));
               if(value%2==0) e.add(value);
               else o.add(value);
           } 
           StringBuilder sb=new StringBuilder();
           for(int i=0; i<s.length();i++){
               int value = Character.getNumericValue(s.charAt(i));
               if(value%2==0){
                   if(!e.isEmpty()){
                       sb.append(e.poll());

                   }
                   else sb.append(o.poll());
               }
                else 
            {
              if(!o.isEmpty() )
               sb.append( o.poll());
            
              else 
                 sb.append(e.poll());
            }
        }
       
        return Integer.parseInt(sb.toString());
    }
           }













        // StringBuilder sb=new StringBuilder();
        // String s=String.valueOf(num);  
        // sb.append(s);

        // for(int i=0; i<sb.length(); i++){
        //     if(sb.charAt(i)%2==0 && sb.charAt(i+1)%2==0){
        //         char temp=sb.charAt(i);
        //         sb.charAt(i)=sb.charAt(i+1);
        //         sb.charAt(i+1)=temp;
        //     }
        // }
        //  int i=Integer.parseInt(s);
        //  return i;
